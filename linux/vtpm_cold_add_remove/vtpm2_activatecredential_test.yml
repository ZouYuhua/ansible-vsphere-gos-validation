# Copyright 2025 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
#
- name: "Check supporting ActivateCredential or not"
  ansible.builtin.shell: tpm2_getcap commands | grep TPM2_CC_ActivateCredential
  delegate_to: "{{ vm_guest_ip }}"
  ignore_errors: true

- name: "Create a Primary Key(EK)"
  ansible.builtin.shell: tpm2_createprimary -C e -c ek.ctx
  delegate_to: "{{ vm_guest_ip }}"

- name: "Create a Attestation Key (AK)"
  ansible.builtin.shell: tpm2_create -C ek.ctx -G rsa -u ak.pub -r ak.priv
  delegate_to: "{{ vm_guest_ip }}"

- name: "Load Attestation Key (AK)"
  ansible.builtin.shell: tpm2_load -C ek.ctx -u ak.pub -r ak.priv -c ak.ctx
  delegate_to: "{{ vm_guest_ip }}"

- name: "Export AK pub as PEM"
  ansible.builtin.shell: tpm2_readpublic -c ak.ctx -f pem -o ak.pub
  delegate_to: "{{ vm_guest_ip }}"

- name: "Prepare test data"
  ansible.builtin.shell: echo "Hello_vTPM_ActivateCredential" > secret.txt
  delegate_to: "{{ vm_guest_ip }}"

- name: "Create Credential Blob"
  ansible.builtin.shell: tpm2_makecredential -e ek.pub -s secret.txt -o credential.dat -n ak.pub
  delegate_to: "{{ vm_guest_ip }}"

- name: "Activate a credential using TPM"
  ansible.builtin.shell: tpm2_activatecredential -c ak.ctx -C ek.ctx -i credential.dat -o secret.dec
  delegate_to: "{{ vm_guest_ip }}"

- name: "Read the data"
  ansible.builtin.shell: cat secret.dec
  delegate_to: "{{ vm_guest_ip }}"
  register: decrypted_data_result

- name: "Check the data"
  ansible.builtin.assert:
    that:
      - decrypted_data_result.stdout is defined
      - decrypted_data_result.stdout
      - decrypted_data_result.stdout == "Hello_vTPM"
    fail_msg: "The decrypted data does not match the original data."
    success_msg: "The decrypted data matches the original data."

- name: "Clean up the files"
  ansible.builtin.shell: rm -f ek.ctx ak.ctx ak.pub ak.priv ak_pub.bin ak.name secret.txt credential.dat secret.dec
  delegate_to: "{{ vm_guest_ip }}"
  ignore_errors: true
